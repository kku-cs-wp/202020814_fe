package kr.ac.kku.cs.wp.wsd;


import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import kr.ac.kku.cs.wp.wsd.dao.BoardDAO;
import kr.ac.kku.cs.wp.wsd.model.Board;

import java.util.Optional;

class UpdateServiceTest {

    @Mock
    private BoardDAO boardDAO;

    @InjectMocks
    private UpdateService updateService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testUpdateBoard_Success() {
        // Given
        Board board = new Board("Old Title", "Old Content");
        board.setId(1);

        // Mock의 반환값을 강제로 Optional로 래핑
        when(boardDAO.getBoardById(1)).thenReturn(Optional.of(board));

        // When
        updateService.updateBoard(1, "New Title", "New Content");

        // Then
        verify(boardDAO, times(1)).updateBoard(any(Board.class));
        assertEquals("New Title", board.getTitle());
        assertEquals("New Content", board.getContent());
    }

    @Test
    void testUpdateBoard_BoardNotFound() {
        // Given
        when(boardDAO.getBoardById(1)).thenReturn(Optional.empty());

        // When & Then
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            updateService.updateBoard(1, "New Title", "New Content");
        });

        assertEquals("해당 ID의 게시글을 찾을 수 없습니다. ID: 1", exception.getMessage());
    }

    @Test
    void testUpdateBoard_EmptyTitle() {
        // Given
        Board board = new Board("Old Title", "Old Content");
        board.setId(1);

        when(boardDAO.getBoardById(1)).thenReturn(Optional.of(board));

        // When & Then
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            updateService.updateBoard(1, "", "New Content");
        });

        assertEquals("제목은 비어 있을 수 없습니다.", exception.getMessage());
    }

    @Test
    void testUpdateBoard_EmptyContent() {
        // Given
        Board board = new Board("Old Title", "Old Content");
        board.setId(1);

        when(boardDAO.getBoardById(1)).thenReturn(Optional.of(board));

        // When & Then
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            updateService.updateBoard(1, "New Title", "");
        });

        assertEquals("내용은 비어 있을 수 없습니다.", exception.getMessage());
    }
}
