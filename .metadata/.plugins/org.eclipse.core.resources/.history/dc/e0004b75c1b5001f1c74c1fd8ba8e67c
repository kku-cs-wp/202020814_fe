package kr.ac.kku.cs.wp.wsd;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import kr.ac.kku.cs.wp.wsd.dao.BoardDAO;
import kr.ac.kku.cs.wp.wsd.model.Board;

import java.util.Optional;

class UpdateServiceTest {

    @Mock
    private BoardDAO boardDAO;

    @InjectMocks
    private UpdateService updateService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testUpdateBoard_Success() {
        Board board = new Board("Old Title", "Old Content");
        board.setId(1);

        when(boardDAO.getBoardById(1)).thenReturn(Optional.of(board));

        updateService.updateBoard(1, "New Title", "New Content");

        verify(boardDAO).updateBoard(board);
        assertEquals("New Title", board.getTitle());
        assertEquals("New Content", board.getContent());
    }

    @Test
    void testUpdateBoard_BoardNotFound() {
        when(boardDAO.getBoardById(1)).thenReturn(Optional.empty());

        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, 
            () -> updateService.updateBoard(1, "New Title", "New Content"));
        
        assertEquals("해당 ID의 게시글을 찾을 수 없습니다. ID: 1", exception.getMessage());
    }

    @Test
    void testUpdateBoard_InvalidInput() {
        Board board = new Board("Old Title", "Old Content");
        board.setId(1);

        when(boardDAO.getBoardById(1)).thenReturn(Optional.of(board));

        assertThrows(IllegalArgumentException.class, 
            () -> updateService.updateBoard(1, "", "New Content"), "제목은 비어 있을 수 없습니다.");
        
        assertThrows(IllegalArgumentException.class, 
            () -> updateService.updateBoard(1, "New Title", ""), "내용은 비어 있을 수 없습니다.");
    }
}

