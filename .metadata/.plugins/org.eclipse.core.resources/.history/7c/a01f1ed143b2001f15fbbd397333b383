package kr.ac.kku.cs.wp.wsd.dao;


import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import java.util.List;

import kr.ac.kku.cs.wp.wsd.model.Board;

public class BoardDAO {

    private final SessionFactory sessionFactory;

    public BoardDAO(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }

    // 게시글 저장
    public void saveBoard(Board board) {
        Transaction transaction = null;
        try (Session session = sessionFactory.openSession()) {
            transaction = session.beginTransaction();
            session.persist(board);
            transaction.commit();
            System.out.println("Board saved successfully: " + board);
        } catch (Exception e) {
            if (transaction != null) {
                transaction.rollback();
            }
            System.err.println("Error saving board: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // 모든 게시글 조회
    @SuppressWarnings("unchecked")
    public List<Board> getAllBoards() {
        try (Session session = sessionFactory.openSession()) {
            return session.createQuery("FROM Board").list();
        } catch (Exception e) {
            System.err.println("Error fetching all boards: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    // ID로 게시글 조회
    public Board getBoardById(int id) {
        try (Session session = sessionFactory.openSession()) {
            return session.get(Board.class, id);
        } catch (Exception e) {
            System.err.println("Error fetching board by id: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    // 게시글 업데이트
    public void updateBoard(Board board) {
        Transaction transaction = null;
        try (Session session = sessionFactory.openSession()) {
            transaction = session.beginTransaction();
            session.merge(board); // 업데이트 시 merge 사용
            transaction.commit();
            System.out.println("Board updated successfully: " + board);
        } catch (Exception e) {
            if (transaction != null) {
                transaction.rollback();
            }
            System.err.println("Error updating board: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // 게시글 삭제
    public void deleteBoard(Board board) {
        Transaction transaction = null;
        try (Session session = sessionFactory.openSession()) {
            transaction = session.beginTransaction();
            session.remove(board); // 삭제 시 remove 사용
            transaction.commit();
            System.out.println("Board deleted successfully: " + board);
        } catch (Exception e) {
            if (transaction != null) {
                transaction.rollback();
            }
            System.err.println("Error deleting board: " + e.getMessage());
            e.printStackTrace();
        }
    }
}

